awk '{pattern + action}' {filenames}

内置变量:
$0则表示所有域,$1表示第一个域,$n表示第n个域
ARGC               命令行参数个数
ARGV               命令行参数排列
ENVIRON            支持队列中系统环境变量的使用
FILENAME           awk浏览的文件名
FNR                浏览文件的记录数
FS                 设置输入域分隔符，等价于命令行 -F选项
NF                 浏览记录的域的个数
NR                 已读的记录数
OFS                输出域分隔符
ORS                输出记录分隔符
RS                 控制记录分隔符

内置函数:
gsub(r,s)：在$0中用s代替r
index(s,t)：返回s中t的第一个位置
length(s)：s的长度
match(s,r)：s是否匹配r
split(s,a,fs)：在fs上将s分成序列a
substr(s,p)：返回s从p开始的子串

在awk中调用系统变量必须用单引号，如果是双引号，则表示字符串 
Flag=abcd 
awk '{print '$Flag'}'   结果为abcd 
awk '{print  "$Flag"}'   结果为$Flag

流程控制语句
（1）if(condition){}else{}
（2）while{}
（3）do{}while(condition);
（4）for(init;condition;step){}
（5）break/continue：如果有END，会执行END中的收尾工作

ex1:
cat /etc/passwd |awk  -F ':'  'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}'
name,shell
root,/bin/bash
....
blue,/bin/nosh

ex2:
搜索/etc/passwd有root关键字的所有行，并显示对应的shell
awk -F: '/root/{print $7}' /etc/passwd   

ex3:
awk 'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}' /etc/passwd

ex4:
ls -l |awk 'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}else { printf "end"}} END{print "[end]size is ", size/1024/1024,"M"}' 
awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd
awk '{ i=1;while(i<NF) {print NF,$i;i++}}' file

ex5:
-v var=val 把val值赋值给var
awk -v num=$num -v num1=$num1

ex6:
awk 'NR==3,NR==5{print;}'

ex7:
awk 'length($0)>80{print NR}'

ex8:
awk与shell的交互
（1）awk中使用shell中定义的变量：使用单引号即可；

#!/bin/bash
STR="hello"
echo | awk '{
print "'${STR}'";
}'
（2）awk中使用shell命令：使用双引号，或者system命令；

#!/bin/bash
echo hello | awk '{
print $0 | "cat"
}'
或者

#!/bin/bash
echo | awk '{
system("date > date.txt")
}'
（3）awk中的变量传出至shell：没有什么好方法，老老实实用文件吧；
（4）getline：awk里，从文件中读取变量到awk中

#!/bin/bash
echo | awk '{
while(getline < "date.txt")
{
print $0;
}

ex9:
echo "1 2 3" | awk '{print}' <==> echo "1 2 3 4 5 6 7 8" | awk '{}1'
打印所有变量

echo "1 2 3 4 5 6 7 8" | awk -vOFS="\t" '{$1=$1}1'
输出空格被tab代替，$1=$1让行的内容发生变化后OFS就生效了

echo "1 2 3 4 5 6 7 8" | awk '{for(i=1;i++<NF;){a=i==NF?$i"\n":$i"\t";printf a}}' 
第二开始到最后，可指定范围



