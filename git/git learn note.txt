参考资料：http://git-scm.com/book/zh/v1

下载project：
git clone git://github.com/schacon/grit.git

更新本地代码：
git pull

添加修改文件：
git add filename

查看更改
git diff
git diff HEAD -- readme.txt

取消add的文件修改：
git reset HEAD filename

HEAD^的意思就是最新一次提交的父提交
git reset --hard HEAD^

--hard参数会执行途中1,2,3 全部动作，即暂存区，工作区全部用指定提交版本的目录树替换掉

--soft 参数只执行1， 不进行暂存区和工作区的覆盖

--mixed或不使用参数，执行1,2覆盖暂存区，但不覆盖工作区

撤销修改
git checkout -- readme.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

查看git环境：
git status

添加修改说明：
git commit -am 'modify'

提交修改：
git push

列出git修改日志：
git log (--graph --decorate --pretty=oneline --abbrev-commit)
--graph 会在各个提交之间打印出线条，这些线条可以展示出分支之间的关系。

--decorate 显示出分支处在哪一次提交上。

--pretty=oneline 只是在一行中显示 sha1 和 提交的注释(译者将title一词应对到更精确的注释)

--abbrev-commit 用开始的7个sha1字符代替整个sha1（他在你的仓库中是唯一的）。


用来记录你的每一次命令
git reflog

移动/修改文件：
git mv filename1 filename2

创建分支：
git branch experiment

切换分支到experiment：
git checkout experiment

切换到主分支:
git checkout master

合并分支到主干道:
git merge experiment 
git merge --no-ff -m "merge with no-ff" dev
--no-ff参数，表示禁用Fast forward
fast forward能够保证不会强制覆盖别人的代码，确保了多人协同开发。

删除分支：
-d，表示“在分支已经合并到主干后删除分支”。如果使用大写的-D的话，则表示“不论如何都删除分支”
git branch -d experiment

设置保存帐号密码
git config --global credential.helper store

暂存空间
git stash
git stash list
git stash pop <==> git stash apply git stash drop
git stash apply stash@{0}

#忽略ssl证书错误
git config http.sslVerify "false"

svn迁移到git：
http://git-scm.com/book/zh/v1/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-%E8%BF%81%E7%A7%BB%E5%88%B0-Git

创建标签
git tag -a v0.1 -m "version 0.1 released" 3628164
git tag -d v0.1
git push origin v1.0
git push origin --tags

