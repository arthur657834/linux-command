参考资料：http://git-scm.com/book/zh/v1

下载project：
git clone git://github.com/schacon/grit.git

更新本地代码：
git pull

添加修改文件：
git add filename

查看更改
git diff
git diff HEAD -- readme.txt

取消add的文件修改：
git reset HEAD filename

HEAD^的意思就是最新一次提交的父提交，即上一次提交
HEAD~100 上100次提交
git reset --hard HEAD^

--hard参数会执行途中1,2,3 全部动作，即暂存区，工作区全部用指定提交版本的目录树替换掉

--soft 参数只执行1， 不进行暂存区和工作区的覆盖

--mixed或不使用参数，执行1,2覆盖暂存区，但不覆盖工作区

撤销修改
git checkout -- readme.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

查看git环境：
git status

添加修改说明：
git commit -am 'modify'
--amend 修改最新一次对commit信息
 
提交修改：
git push

列出git修改日志：
git log (--graph --decorate --pretty=oneline --abbrev-commit)
--graph 会在各个提交之间打印出线条，这些线条可以展示出分支之间的关系。

--decorate 显示出分支处在哪一次提交上。

--pretty=oneline 只是在一行中显示 sha1 和 提交的注释(译者将title一词应对到更精确的注释)

--abbrev-commit 用开始的7个sha1字符代替整个sha1（他在你的仓库中是唯一的）。


用来记录你的每一次命令
git reflog

移动/修改文件：
git mv filename1 filename2

创建分支：
git branch experiment

切换分支到experiment：
git checkout experiment

切换到主分支:
git checkout master

合并分支到主干道:
git merge experiment 
git merge --no-ff -m "merge with no-ff" dev
--no-ff参数，表示禁用Fast forward
fast forward能够保证不会强制覆盖别人的代码，确保了多人协同开发。
master合并到feature
git merge master feature

删除分支：
-d，表示“在分支已经合并到主干后删除分支”。如果使用大写的-D的话，则表示“不论如何都删除分支”
git branch -d experiment

设置保存帐号密码
git config --global credential.helper store

暂存空间
git stash
git stash list
git stash pop <==> git stash apply git stash drop
git stash apply stash@{0}

#忽略ssl证书错误
git config http.sslVerify "false"

svn迁移到git：
http://git-scm.com/book/zh/v1/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-%E8%BF%81%E7%A7%BB%E5%88%B0-Git

ex:
--filter-branch 从每一个提交移除一个文件
--force 强制
--tree-filter表示修改文件列表，选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。
--msg-filter表示修改提交信息，原提交信息从标准输入读入，新提交信息输出到标准输出。
--prune-empty表示如果修改后的提交为空则扔掉不要。在一次试运行中我发现虽然文件被删除了，但是还剩下个空的提交，就查了下 man 文档，找到了这个选项。
-f是忽略备份。不加这个选项第二次运行这个命令时会出错，意思是 git 上次做了备份，现在再要运行的话得处理掉上次的备份。
--all是针对所有的分支。


在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。

最后将可以看到 Git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。


通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址
git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
        then
                GIT_AUTHOR_NAME="Scott Chacon";
                GIT_AUTHOR_EMAIL="schacon@example.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD

创建标签
git tag -a v0.1 -m "version 0.1 released" 3628164
git tag -d v0.1
git push origin v1.0
git push origin --tags

回退到某个提交版本
git revert <commit>
因为本质上不是修改过去的版本历史，而是将回退版本历史作为一次新的提交，所以不会改变版本历史，在push到远程仓库的时候也不会影响到团队其他人。

git rev-parse用于显示一些git的基本信息
git rev-parse --short HEAD
显示分支
git rev-parse --symbolic --branches

